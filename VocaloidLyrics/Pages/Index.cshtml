@page "/"
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@inject HttpClient Http

<h1>VocaDB lyrics display</h1>

<div class="row">
	<form class="form-horizontal col-sm-6">
		<div class="input-group">
			<input type="text" class="form-control" placeholder="Song URL" @bind(songUrl) />
			<span class="input-group-btn">
				<button class="btn btn-default" @onclick(async () => await GetSongAsync(null))>Get</button>
			</span>
		</div>
	</form>
</div>

@if (song != null) {
	<h2>Lyrics for song @song.name by @song.artistString</h2>
	@if (!song.lyrics.Any()) {
		<div class="alert alert-warning">
			No lyrics! Try another song.
		</div>
	}
	<ul class="nav nav-tabs">
		@foreach (var lyrics in song.lyrics) {
			<li class="@(lyrics == activeLyrics ? "nav-item active" :"nav-item")">
				<a class="nav-link" href="#" @onclick(() => activeLyrics = lyrics)>
					@GetLyricsTitle(lyrics)
				</a>
			</li>
		}
	</ul>
	@if (activeLyrics != null) {
		<div style="white-space: pre-line;">
			@activeLyrics.value
		</div>
	}
}

<script>
    Blazor.registerFunction('log', (data) => {
		console.log(data);
        return true;
    });
</script>

@functions {

	VocaDbContracts.SongForApiContract song;
	VocaDbContracts.LyricsForSongContract activeLyrics;
	string songUrl = null;

	private void Log(object val) {
		RegisteredFunction.Invoke<bool>("log", song);
	}

	string GetLyricsTitle(VocaDbContracts.LyricsForSongContract lyrics) {
		if (!string.IsNullOrEmpty(lyrics.cultureCode)) {
			return new System.Globalization.CultureInfo(lyrics.cultureCode).EnglishName;
		}

		var translationType = (VocaDbContracts.TranslationType)Enum.Parse(typeof(VocaDbContracts.TranslationType), lyrics.translationType);

		switch (translationType) {
			case VocaDbContracts.TranslationType.Romanized:
				return "Romanized";
			case VocaDbContracts.TranslationType.Original:
				return "Original";
			case VocaDbContracts.TranslationType.Translation:
				return "Translation";
			default:
				return "Unspecified";
		}

	}

	async Task GetSongAsync(object action)
	{
		var url = "https://vocadb.net/api/songs?maxResults=1&nameMatchMode=Auto&preferAccurateMatches=true&fields=Lyrics&query=" + songUrl;
		//var response = await Http.GetAsync(url);
		var result = await Http.GetJsonAsync<VocaDbContracts.PartialFindResult<VocaDbContracts.SongForApiContract>>(url);
		this.song = result.items.FirstOrDefault();
		if (song != null && song.lyrics.Any()) {
			this.activeLyrics = song.lyrics.FirstOrDefault();
		}
		this.StateHasChanged();
	}

}